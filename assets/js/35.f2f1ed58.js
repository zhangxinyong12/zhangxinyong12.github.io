(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{208:function(t,_,s){"use strict";s.r(_);var i=s(0),v=Object(i.a)({},(function(){var t=this,_=t._self._c;return _("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),_("p",[t._v("通过源码学习，你将掌握：")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._v(" "),t._m(60),t._v(" "),t._m(61),t._v(" "),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),t._v(" "),t._m(65),t._v(" "),t._m(66),t._v(" "),t._m(67),t._v(" "),t._m(68),t._v(" "),t._m(69),t._v(" "),t._m(70),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),t._m(73),t._v(" "),t._m(74),t._v(" "),t._m(75),t._v(" "),t._m(76),t._v(" "),t._m(77),t._v(" "),t._m(78),t._v(" "),t._m(79),t._v(" "),t._m(80),t._v(" "),t._m(81),t._v(" "),t._m(82),t._v(" "),t._m(83),t._v(" "),t._m(84),t._v(" "),t._m(85),t._v(" "),t._m(86),t._v(" "),t._m(87),t._v(" "),t._m(88),t._v(" "),t._m(89),t._v(" "),t._m(90),t._v(" "),t._m(91),t._v(" "),t._m(92),t._v(" "),t._m(93),t._v(" "),t._m(94),t._v(" "),t._m(95),t._v(" "),t._m(96),t._v(" "),t._m(97),t._v(" "),t._m(98),t._v(" "),t._m(99),t._v(" "),t._m(100),t._v(" "),t._m(101),t._v(" "),t._m(102),t._v(" "),t._m(103),t._v(" "),t._m(104),t._v(" "),t._m(105),t._v(" "),t._m(106),t._v(" "),t._m(107),t._v(" "),t._m(108),t._v(" "),t._m(109),t._v(" "),t._m(110),t._v(" "),t._m(111),t._v(" "),t._m(112),t._v(" "),t._m(113),t._v(" "),t._m(114),t._v(" "),t._m(115),t._v(" "),t._m(116),t._v(" "),t._m(117),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://react.dev/",target:"_blank",rel:"noopener noreferrer"}},[t._v("React 18 官方文档"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://github.com/facebook/react",target:"_blank",rel:"noopener noreferrer"}},[t._v("React 源码仓库"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://github.com/reactjs/rfcs",target:"_blank",rel:"noopener noreferrer"}},[t._v("React RFC"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://react.dev/blog/2022/03/29/react-v18",target:"_blank",rel:"noopener noreferrer"}},[t._v("React 18 新特性"),_("OutboundLink")],1)])]),t._v(" "),t._m(118),t._v(" "),t._m(119),t._v(" "),t._m(120),t._v(" "),t._m(121),t._v(" "),t._m(122),t._v(" "),t._m(123),t._v(" "),t._m(124),t._v(" "),t._m(125),t._v(" "),t._m(126),t._v(" "),t._m(127),t._v(" "),t._m(128),t._v(" "),t._m(129),t._v(" "),t._m(130),t._v(" "),t._m(131),t._v(" "),t._m(132),t._v(" "),t._m(133),t._v(" "),t._m(134),t._v(" "),t._m(135),t._v(" "),t._m(136),t._v(" "),t._m(137),t._v(" "),t._m(138),t._v(" "),t._m(139),t._v(" "),t._m(140),t._v(" "),t._m(141),t._v(" "),t._m(142),t._v(" "),t._m(143),t._v(" "),t._m(144),t._v(" "),t._m(145),t._v(" "),t._m(146),t._v(" "),t._m(147),t._v(" "),t._m(148),t._v(" "),t._m(149),t._v(" "),t._m(150),t._v(" "),t._m(151),t._v(" "),t._m(152),t._v(" "),t._m(153),t._v(" "),t._m(154),t._v(" "),t._m(155),t._v(" "),t._m(156),t._v(" "),_("hr"),t._v(" "),t._m(157),t._v(" "),t._m(158),t._v(" "),t._m(159),t._v(" "),_("p",[t._v("准备好了吗？让我们继续这段激动人心的源码探索之旅吧！🚀")])])}),[function(){var t=this._self._c;return t("h1",{attrs:{id:"react-18-源码学习路线图-🚀"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-18-源码学习路线图-🚀"}},[this._v("#")]),this._v(" React 18 源码学习路线图 🚀")])},function(){var t=this._self._c;return t("blockquote",[t("p",[this._v("作为一名有 5 年 React 使用经验的前端开发者，现在是时候深入源码层面，掌握 React 的核心原理了！")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"📚-学习目标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#📚-学习目标"}},[this._v("#")]),this._v(" 📚 学习目标")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[t._v("React 18 的核心架构设计")]),t._v(" "),_("li",[t._v("虚拟 DOM 的实现原理")]),t._v(" "),_("li",[t._v("Fiber 架构的工作机制")]),t._v(" "),_("li",[t._v("状态管理和更新流程")]),t._v(" "),_("li",[t._v("事件系统和生命周期")]),t._v(" "),_("li",[t._v("并发特性的实现原理")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"🏗️-react-18-核心架构概览"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🏗️-react-18-核心架构概览"}},[this._v("#")]),this._v(" 🏗️ React 18 核心架构概览")])},function(){var t=this._self._c;return t("h3",{attrs:{id:"_1-整体架构分层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-整体架构分层"}},[this._v("#")]),this._v(" 1. 整体架构分层")])},function(){var t=this._self._c;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("┌─────────────────────────────────────┐\n│           React应用层                │\n├─────────────────────────────────────┤\n│         React核心包 (react)          │\n├─────────────────────────────────────┤\n│      React渲染器 (react-dom)        │\n├─────────────────────────────────────┤\n│        调度器 (scheduler)           │\n├─────────────────────────────────────┤\n│        协调器 (reconciler)          │\n└─────────────────────────────────────┘\n")])])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"_2-核心概念关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-核心概念关系"}},[this._v("#")]),this._v(" 2. 核心概念关系")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[_("strong",[t._v("React Element")]),t._v(": JSX 编译后的对象")]),t._v(" "),_("li",[_("strong",[t._v("Fiber Node")]),t._v(": 工作单元，包含组件信息")]),t._v(" "),_("li",[_("strong",[t._v("Work In Progress Tree")]),t._v(": 正在构建的树")]),t._v(" "),_("li",[_("strong",[t._v("Current Tree")]),t._v(": 当前显示的树")]),t._v(" "),_("li",[_("strong",[t._v("Lanes")]),t._v(": 优先级系统")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"🎯-学习路线图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🎯-学习路线图"}},[this._v("#")]),this._v(" 🎯 学习路线图")])},function(){var t=this._self._c;return t("h3",{attrs:{id:"第一阶段：基础概念理解-✅-1-2-周"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一阶段：基础概念理解-✅-1-2-周"}},[this._v("#")]),this._v(" 第一阶段：基础概念理解 ✅ (1-2 周)")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("[x] React 18 新特性概览")]),this._v(" "),t("li",[this._v("[x] 虚拟 DOM 概念深入")]),this._v(" "),t("li",[this._v("[x] JSX 编译原理")]),this._v(" "),t("li",[this._v("[x] React Element 结构分析")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("学习重点")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("理解 React 18 相比之前版本的新特性")]),this._v(" "),t("li",[this._v("掌握虚拟 DOM 的概念和优势")]),this._v(" "),t("li",[this._v("了解 JSX 如何编译为 JavaScript 代码")]),this._v(" "),t("li",[this._v("分析 React Element 的数据结构")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"第二阶段：fiber-架构深入-✅-2-3-周"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二阶段：fiber-架构深入-✅-2-3-周"}},[this._v("#")]),this._v(" 第二阶段：Fiber 架构深入 ✅ (2-3 周)")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("[x] Fiber 节点结构")]),this._v(" "),t("li",[this._v("[x] 双缓冲树机制")]),this._v(" "),t("li",[this._v("[x] 工作循环 (Work Loop)")]),this._v(" "),t("li",[this._v("[x] 优先级调度")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("学习重点")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("深入理解 Fiber 节点的数据结构")]),this._v(" "),t("li",[this._v("掌握双缓冲树的切换机制")]),this._v(" "),t("li",[this._v("理解工作循环的执行流程")]),this._v(" "),t("li",[this._v("学习优先级调度的实现原理")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"第三阶段：渲染流程解析-✅-2-3-周"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三阶段：渲染流程解析-✅-2-3-周"}},[this._v("#")]),this._v(" 第三阶段：渲染流程解析 ✅ (2-3 周)")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("[x] 首次渲染 (Mount)")]),this._v(" "),t("li",[this._v("[x] 更新流程 (Update)")]),this._v(" "),t("li",[this._v("[x] 协调算法 (Reconciliation)")]),this._v(" "),t("li",[this._v("[x] 提交阶段 (Commit)")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("学习重点")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("分析首次渲染的完整流程")]),this._v(" "),t("li",[this._v("理解组件更新的触发机制")]),this._v(" "),t("li",[this._v("掌握协调算法的 diff 策略")]),this._v(" "),t("li",[this._v("了解提交阶段的 DOM 操作")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"第四阶段：状态管理原理-2-3-周"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第四阶段：状态管理原理-2-3-周"}},[this._v("#")]),this._v(" 第四阶段：状态管理原理 (2-3 周)")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[t._v("[ ] useState 实现原理")]),t._v(" "),_("li",[t._v("[ ] useEffect 实现原理")]),t._v(" "),_("li",[t._v("[ ] useRef 实现原理")]),t._v(" "),_("li",[t._v("[ ] 自定义 Hook 原理")]),t._v(" "),_("li",[t._v("[ ] Context 实现机制")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("学习重点")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("理解 Hooks 的底层实现原理")]),this._v(" "),t("li",[this._v("掌握状态更新的调度机制")]),this._v(" "),t("li",[this._v("分析副作用处理的时机")]),this._v(" "),t("li",[this._v("学习自定义 Hook 的设计模式")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("核心源码文件")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[t("code",[this._v("packages/react/src/ReactHooks.js")]),this._v(" - Hooks 核心实现")]),this._v(" "),t("li",[t("code",[this._v("packages/react/src/ReactContext.js")]),this._v(" - Context 实现")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"第五阶段：并发特性实现-2-3-周"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第五阶段：并发特性实现-2-3-周"}},[this._v("#")]),this._v(" 第五阶段：并发特性实现 (2-3 周)")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[t._v("[ ] Concurrent Mode 架构")]),t._v(" "),_("li",[t._v("[ ] Suspense 实现原理")]),t._v(" "),_("li",[t._v("[ ] 时间切片 (Time Slicing)")]),t._v(" "),_("li",[t._v("[ ] 优先级调度系统")]),t._v(" "),_("li",[t._v("[ ] 可中断渲染机制")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("学习重点")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("理解并发模式的设计思想")]),this._v(" "),t("li",[this._v("掌握 Suspense 的底层实现")]),this._v(" "),t("li",[this._v("学习时间切片的调度策略")]),this._v(" "),t("li",[this._v("分析优先级系统的实现")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("核心源码文件")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[t("code",[this._v("packages/react/src/ReactConcurrentMode.js")]),this._v(" - 并发模式")]),this._v(" "),t("li",[t("code",[this._v("packages/react/src/ReactSuspense.js")]),this._v(" - Suspense 实现")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"第六阶段：事件系统原理-1-2-周"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第六阶段：事件系统原理-1-2-周"}},[this._v("#")]),this._v(" 第六阶段：事件系统原理 (1-2 周)")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[t._v("[ ] 事件委托机制")]),t._v(" "),_("li",[t._v("[ ] 合成事件 (SyntheticEvent)")]),t._v(" "),_("li",[t._v("[ ] 事件优先级")]),t._v(" "),_("li",[t._v("[ ] 事件池管理")]),t._v(" "),_("li",[t._v("[ ] 事件冒泡和捕获")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("学习重点")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("理解事件委托的性能优势")]),this._v(" "),t("li",[this._v("掌握合成事件的封装机制")]),this._v(" "),t("li",[this._v("学习事件优先级的处理策略")]),this._v(" "),t("li",[this._v("分析事件池的内存管理")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("核心源码文件")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[t("code",[this._v("packages/react-dom/src/events/SyntheticEvent.js")]),this._v(" - 合成事件")]),this._v(" "),t("li",[t("code",[this._v("packages/react-dom/src/events/DOMPluginEventSystem.js")]),this._v(" - 事件系统")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"🌟-react-生态系统学习路线图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🌟-react-生态系统学习路线图"}},[this._v("#")]),this._v(" 🌟 React 生态系统学习路线图")])},function(){var t=this._self._c;return t("h3",{attrs:{id:"第七阶段：路由系统源码-1-2-周"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第七阶段：路由系统源码-1-2-周"}},[this._v("#")]),this._v(" 第七阶段：路由系统源码 (1-2 周)")])},function(){var t=this._self._c;return t("h4",{attrs:{id:"react-router-v6-源码学习"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-router-v6-源码学习"}},[this._v("#")]),this._v(" React Router v6 源码学习")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[t._v("[ ] 路由原理和实现")]),t._v(" "),_("li",[t._v("[ ] 动态路由和嵌套路由")]),t._v(" "),_("li",[t._v("[ ] 路由守卫和权限控制")]),t._v(" "),_("li",[t._v("[ ] 路由懒加载实现")]),t._v(" "),_("li",[t._v("[ ] 路由状态管理")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("核心概念")]),this._v("：")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[_("strong",[t._v("Browser Router")]),t._v(": 基于 History API 的路由")]),t._v(" "),_("li",[_("strong",[t._v("Hash Router")]),t._v(": 基于 Hash 的路由")]),t._v(" "),_("li",[_("strong",[t._v("Memory Router")]),t._v(": 内存路由，用于测试")]),t._v(" "),_("li",[_("strong",[t._v("路由上下文")]),t._v(": Router Context 的实现")]),t._v(" "),_("li",[_("strong",[t._v("路由匹配")]),t._v(": 路径匹配算法")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("重点源码文件")]),this._v("：")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[_("code",[t._v("packages/react-router/index.tsx")]),t._v(" - 路由入口")]),t._v(" "),_("li",[_("code",[t._v("packages/react-router/lib/components.tsx")]),t._v(" - 路由组件")]),t._v(" "),_("li",[_("code",[t._v("packages/react-router/lib/hooks.tsx")]),t._v(" - 路由 Hooks")]),t._v(" "),_("li",[_("code",[t._v("packages/react-router/lib/router.tsx")]),t._v(" - 路由核心逻辑")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("学习重点")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("理解路由的底层实现原理")]),this._v(" "),t("li",[this._v("掌握动态路由的匹配机制")]),this._v(" "),t("li",[this._v("学习路由权限控制的策略")]),this._v(" "),t("li",[this._v("分析路由懒加载的实现方式")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"第八阶段：状态管理库-3-4-周"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第八阶段：状态管理库-3-4-周"}},[this._v("#")]),this._v(" 第八阶段：状态管理库 (3-4 周)")])},function(){var t=this._self._c;return t("h4",{attrs:{id:"_1-redux-toolkit-1-2-周"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-redux-toolkit-1-2-周"}},[this._v("#")]),this._v(" 1. Redux Toolkit (1-2 周)")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[t._v("[ ] Redux 核心概念和原理")]),t._v(" "),_("li",[t._v("[ ] Redux Toolkit 的优势")]),t._v(" "),_("li",[t._v("[ ] RTK Query 数据获取")]),t._v(" "),_("li",[t._v("[ ] 中间件机制 (Redux Thunk, Redux Saga)")]),t._v(" "),_("li",[t._v("[ ] 状态持久化")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("核心概念")]),this._v("：")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[_("strong",[t._v("Store")]),t._v(": 状态容器")]),t._v(" "),_("li",[_("strong",[t._v("Reducer")]),t._v(": 纯函数，处理状态更新")]),t._v(" "),_("li",[_("strong",[t._v("Action")]),t._v(": 描述状态变化的普通对象")]),t._v(" "),_("li",[_("strong",[t._v("Dispatch")]),t._v(": 发送 Action 的方法")]),t._v(" "),_("li",[_("strong",[t._v("Selector")]),t._v(": 从 Store 中选择数据的函数")]),t._v(" "),_("li",[_("strong",[t._v("Middleware")]),t._v(": 中间件系统")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("重点源码文件")]),this._v("：")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[_("code",[t._v("packages/redux/src/createStore.ts")]),t._v(" - Store 创建")]),t._v(" "),_("li",[_("code",[t._v("packages/redux/src/combineReducers.ts")]),t._v(" - Reducer 组合")]),t._v(" "),_("li",[_("code",[t._v("packages/redux/src/applyMiddleware.ts")]),t._v(" - 中间件应用")]),t._v(" "),_("li",[_("code",[t._v("packages/redux-toolkit/src/createSlice.ts")]),t._v(" - Slice 创建")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("学习重点")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("理解单向数据流的设计思想")]),this._v(" "),t("li",[this._v("掌握中间件的执行机制")]),this._v(" "),t("li",[this._v("学习 RTK Query 的数据获取策略")]),this._v(" "),t("li",[this._v("分析状态持久化的实现方式")])])},function(){var t=this._self._c;return t("h4",{attrs:{id:"_2-zustand-1-周"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-zustand-1-周"}},[this._v("#")]),this._v(" 2. Zustand (1 周)")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[t._v("[ ] 轻量级状态管理")]),t._v(" "),_("li",[t._v("[ ] 基于 Hook 的 API 设计")]),t._v(" "),_("li",[t._v("[ ] 状态分片和组合")]),t._v(" "),_("li",[t._v("[ ] 中间件和持久化")]),t._v(" "),_("li",[t._v("[ ] 性能优化策略")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("核心概念")]),this._v("：")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[_("strong",[t._v("Store")]),t._v(": 状态存储")]),t._v(" "),_("li",[_("strong",[t._v("Actions")]),t._v(": 状态更新方法")]),t._v(" "),_("li",[_("strong",[t._v("Subscriptions")]),t._v(": 状态订阅")]),t._v(" "),_("li",[_("strong",[t._v("Middleware")]),t._v(": 中间件系统")]),t._v(" "),_("li",[_("strong",[t._v("State Slices")]),t._v(": 状态分片")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("重点源码文件")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[t("code",[this._v("src/index.ts")]),this._v(" - 核心实现")]),this._v(" "),t("li",[t("code",[this._v("src/middleware.ts")]),this._v(" - 中间件系统")]),this._v(" "),t("li",[t("code",[this._v("src/subscribeWithSelector.ts")]),this._v(" - 选择器订阅")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("学习重点")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("理解轻量级状态管理的优势")]),this._v(" "),t("li",[this._v("掌握基于 Hook 的 API 设计")]),this._v(" "),t("li",[this._v("学习状态分片和组合的策略")]),this._v(" "),t("li",[this._v("分析性能优化的实现方式")])])},function(){var t=this._self._c;return t("h4",{attrs:{id:"_3-mobx-1-周"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-mobx-1-周"}},[this._v("#")]),this._v(" 3. MobX (1 周)")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[t._v("[ ] 响应式编程模型")]),t._v(" "),_("li",[t._v("[ ] Observable 和 Observer")]),t._v(" "),_("li",[t._v("[ ] Actions 和 Computed Values")]),t._v(" "),_("li",[t._v("[ ] 装饰器和 Hooks 用法")]),t._v(" "),_("li",[t._v("[ ] 状态追踪机制")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("核心概念")]),this._v("：")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[_("strong",[t._v("Observable")]),t._v(": 可观察的状态")]),t._v(" "),_("li",[_("strong",[t._v("Actions")]),t._v(": 修改状态的方法")]),t._v(" "),_("li",[_("strong",[t._v("Computed")]),t._v(": 计算属性")]),t._v(" "),_("li",[_("strong",[t._v("Reactions")]),t._v(": 副作用处理")]),t._v(" "),_("li",[_("strong",[t._v("Autorun")]),t._v(": 自动运行")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("重点源码文件")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[t("code",[this._v("packages/mobx/src/api/observable.ts")]),this._v(" - Observable 创建")]),this._v(" "),t("li",[t("code",[this._v("packages/mobx/src/core/action.ts")]),this._v(" - Action 实现")]),this._v(" "),t("li",[t("code",[this._v("packages/mobx/src/core/computed.ts")]),this._v(" - Computed 实现")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("学习重点")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("理解响应式编程的设计思想")]),this._v(" "),t("li",[this._v("掌握 Observable 的实现原理")]),this._v(" "),t("li",[this._v("学习 Actions 和 Computed 的机制")]),this._v(" "),t("li",[this._v("分析状态追踪的实现方式")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"第九阶段：构建工具原理-2-3-周"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第九阶段：构建工具原理-2-3-周"}},[this._v("#")]),this._v(" 第九阶段：构建工具原理 (2-3 周)")])},function(){var t=this._self._c;return t("h4",{attrs:{id:"_1-vite-1-周"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-vite-1-周"}},[this._v("#")]),this._v(" 1. Vite (1 周)")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[t._v("[ ] 构建工具原理")]),t._v(" "),_("li",[t._v("[ ] ES Module 预构建")]),t._v(" "),_("li",[t._v("[ ] 热更新机制")]),t._v(" "),_("li",[t._v("[ ] 插件系统")]),t._v(" "),_("li",[t._v("[ ] 依赖预构建")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("核心概念")]),this._v("：")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[_("strong",[t._v("Dev Server")]),t._v(": 开发服务器")]),t._v(" "),_("li",[_("strong",[t._v("Build")]),t._v(": 生产构建")]),t._v(" "),_("li",[_("strong",[t._v("Plugins")]),t._v(": 插件系统")]),t._v(" "),_("li",[_("strong",[t._v("HMR")]),t._v(": 热模块替换")]),t._v(" "),_("li",[_("strong",[t._v("Pre-bundling")]),t._v(": 依赖预构建")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("重点源码文件")]),this._v("：")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[_("code",[t._v("packages/vite/src/node/cli.ts")]),t._v(" - CLI 入口")]),t._v(" "),_("li",[_("code",[t._v("packages/vite/src/node/dev.ts")]),t._v(" - 开发服务器")]),t._v(" "),_("li",[_("code",[t._v("packages/vite/src/node/build.ts")]),t._v(" - 构建流程")]),t._v(" "),_("li",[_("code",[t._v("packages/vite/src/node/plugins/index.ts")]),t._v(" - 插件系统")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("学习重点")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("理解 ES Module 预构建的优势")]),this._v(" "),t("li",[this._v("掌握热更新的实现机制")]),this._v(" "),t("li",[this._v("学习插件系统的设计模式")]),this._v(" "),t("li",[this._v("分析依赖预构建的策略")])])},function(){var t=this._self._c;return t("h4",{attrs:{id:"_2-webpack-1-2-周"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-webpack-1-2-周"}},[this._v("#")]),this._v(" 2. Webpack (1-2 周)")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[t._v("[ ] 模块打包原理")]),t._v(" "),_("li",[t._v("[ ] Loader 和 Plugin 机制")]),t._v(" "),_("li",[t._v("[ ] 代码分割和懒加载")]),t._v(" "),_("li",[t._v("[ ] 性能优化策略")]),t._v(" "),_("li",[t._v("[ ] 模块联邦")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("核心概念")]),this._v("：")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[_("strong",[t._v("Entry")]),t._v(": 入口文件")]),t._v(" "),_("li",[_("strong",[t._v("Output")]),t._v(": 输出配置")]),t._v(" "),_("li",[_("strong",[t._v("Loader")]),t._v(": 文件处理器")]),t._v(" "),_("li",[_("strong",[t._v("Plugin")]),t._v(": 插件系统")]),t._v(" "),_("li",[_("strong",[t._v("Chunk")]),t._v(": 代码块")]),t._v(" "),_("li",[_("strong",[t._v("Module Federation")]),t._v(": 模块联邦")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("重点源码文件")]),this._v("：")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[_("code",[t._v("lib/webpack.js")]),t._v(" - Webpack 入口")]),t._v(" "),_("li",[_("code",[t._v("lib/Compilation.js")]),t._v(" - 编译过程")]),t._v(" "),_("li",[_("code",[t._v("lib/Module.js")]),t._v(" - 模块基类")]),t._v(" "),_("li",[_("code",[t._v("lib/Chunk.js")]),t._v(" - 代码块")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("学习重点")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("理解模块打包的完整流程")]),this._v(" "),t("li",[this._v("掌握 Loader 和 Plugin 的机制")]),this._v(" "),t("li",[this._v("学习代码分割和懒加载的实现")]),this._v(" "),t("li",[this._v("分析性能优化的策略")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"第十阶段：测试和调试-1-2-周"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第十阶段：测试和调试-1-2-周"}},[this._v("#")]),this._v(" 第十阶段：测试和调试 (1-2 周)")])},function(){var t=this._self._c;return t("h4",{attrs:{id:"_1-jest-react-testing-library"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-jest-react-testing-library"}},[this._v("#")]),this._v(" 1. Jest + React Testing Library")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[t._v("[ ] 单元测试原理")]),t._v(" "),_("li",[t._v("[ ] 组件测试策略")]),t._v(" "),_("li",[t._v("[ ] Mock 和 Stub 使用")]),t._v(" "),_("li",[t._v("[ ] 测试覆盖率分析")]),t._v(" "),_("li",[t._v("[ ] 快照测试")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("核心概念")]),this._v("：")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[_("strong",[t._v("Test Runner")]),t._v(": 测试运行器")]),t._v(" "),_("li",[_("strong",[t._v("Assertions")]),t._v(": 断言机制")]),t._v(" "),_("li",[_("strong",[t._v("Mocking")]),t._v(": 模拟对象")]),t._v(" "),_("li",[_("strong",[t._v("Coverage")]),t._v(": 测试覆盖率")]),t._v(" "),_("li",[_("strong",[t._v("Snapshot")]),t._v(": 快照测试")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("重点源码文件")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[t("code",[this._v("packages/jest-core/src/TestRunner.ts")]),this._v(" - 测试运行器")]),this._v(" "),t("li",[t("code",[this._v("packages/jest-runtime/src/index.ts")]),this._v(" - 运行时环境")]),this._v(" "),t("li",[t("code",[this._v("packages/jest-snapshot/src/index.ts")]),this._v(" - 快照系统")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("学习重点")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("理解单元测试的设计原则")]),this._v(" "),t("li",[this._v("掌握组件测试的最佳实践")]),this._v(" "),t("li",[this._v("学习 Mock 和 Stub 的使用技巧")]),this._v(" "),t("li",[this._v("分析测试覆盖率的计算方法")])])},function(){var t=this._self._c;return t("h4",{attrs:{id:"_2-react-devtools"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-react-devtools"}},[this._v("#")]),this._v(" 2. React DevTools")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[t._v("[ ] 组件树调试")]),t._v(" "),_("li",[t._v("[ ] 状态和 Props 查看")]),t._v(" "),_("li",[t._v("[ ] 性能分析")]),t._v(" "),_("li",[t._v("[ ] Profiler 使用")]),t._v(" "),_("li",[t._v("[ ] 组件性能优化")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("核心概念")]),this._v("：")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[_("strong",[t._v("Component Tree")]),t._v(": 组件树")]),t._v(" "),_("li",[_("strong",[t._v("Props")]),t._v(": 组件属性")]),t._v(" "),_("li",[_("strong",[t._v("State")]),t._v(": 组件状态")]),t._v(" "),_("li",[_("strong",[t._v("Profiler")]),t._v(": 性能分析器")]),t._v(" "),_("li",[_("strong",[t._v("Performance")]),t._v(": 性能监控")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("学习重点")]),this._v("：")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("理解组件树的调试方法")]),this._v(" "),t("li",[this._v("掌握状态和 Props 的查看技巧")]),this._v(" "),t("li",[this._v("学习性能分析的使用方法")]),this._v(" "),t("li",[this._v("分析组件性能优化的策略")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"🔍-源码学习重点文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🔍-源码学习重点文件"}},[this._v("#")]),this._v(" 🔍 源码学习重点文件")])},function(){var t=this._self._c;return t("h3",{attrs:{id:"核心包-react"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心包-react"}},[this._v("#")]),this._v(" 核心包 (react)")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[_("code",[t._v("packages/react/src/ReactElement.js")]),t._v(" - React 元素创建")]),t._v(" "),_("li",[_("code",[t._v("packages/react/src/React.js")]),t._v(" - React 核心 API")]),t._v(" "),_("li",[_("code",[t._v("packages/react/src/ReactHooks.js")]),t._v(" - Hooks 实现")]),t._v(" "),_("li",[_("code",[t._v("packages/react/src/ReactContext.js")]),t._v(" - Context 实现")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"协调器-reconciler"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#协调器-reconciler"}},[this._v("#")]),this._v(" 协调器 (reconciler)")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[_("code",[t._v("packages/react-reconciler/src/ReactFiber.js")]),t._v(" - Fiber 节点")]),t._v(" "),_("li",[_("code",[t._v("packages/react-reconciler/src/ReactFiberWorkLoop.js")]),t._v(" - 工作循环")]),t._v(" "),_("li",[_("code",[t._v("packages/react-reconciler/src/ReactFiberReconciler.js")]),t._v(" - 协调算法")]),t._v(" "),_("li",[_("code",[t._v("packages/react-reconciler/src/ReactFiberHooks.js")]),t._v(" - Hooks 协调")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"渲染器-react-dom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染器-react-dom"}},[this._v("#")]),this._v(" 渲染器 (react-dom)")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[_("code",[t._v("packages/react-dom/src/client/ReactDOM.js")]),t._v(" - DOM 渲染入口")]),t._v(" "),_("li",[_("code",[t._v("packages/react-dom/src/client/ReactDOMComponent.js")]),t._v(" - 组件渲染")]),t._v(" "),_("li",[_("code",[t._v("packages/react-dom/src/events/SyntheticEvent.js")]),t._v(" - 合成事件")]),t._v(" "),_("li",[_("code",[t._v("packages/react-dom/src/events/DOMPluginEventSystem.js")]),t._v(" - 事件系统")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"调度器-scheduler"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调度器-scheduler"}},[this._v("#")]),this._v(" 调度器 (scheduler)")])},function(){var t=this._self._c;return t("ul",[t("li",[t("code",[this._v("packages/scheduler/src/Scheduler.js")]),this._v(" - 任务调度")]),this._v(" "),t("li",[t("code",[this._v("packages/scheduler/src/SchedulerHostConfig.js")]),this._v(" - 主机配置")]),this._v(" "),t("li",[t("code",[this._v("packages/scheduler/src/SchedulerPostTask.js")]),this._v(" - 后置任务")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"📖-学习资源推荐"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#📖-学习资源推荐"}},[this._v("#")]),this._v(" 📖 学习资源推荐")])},function(){var t=this._self._c;return t("h3",{attrs:{id:"官方资源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#官方资源"}},[this._v("#")]),this._v(" 官方资源")])},function(){var t=this._self._c;return t("h3",{attrs:{id:"优秀文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优秀文章"}},[this._v("#")]),this._v(" 优秀文章")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("React 18 源码解析系列")]),this._v(" "),t("li",[this._v("Fiber 架构详解")]),this._v(" "),t("li",[this._v("并发特性实现原理")]),this._v(" "),t("li",[this._v("Hooks 实现原理深度解析")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"实践项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实践项目"}},[this._v("#")]),this._v(" 实践项目")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[t._v("实现简化版 React")]),t._v(" "),_("li",[t._v("手写 Fiber 架构")]),t._v(" "),_("li",[t._v("实现调度器")]),t._v(" "),_("li",[t._v("手写 React Router")]),t._v(" "),_("li",[t._v("实现状态管理库")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"🚀-学习建议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🚀-学习建议"}},[this._v("#")]),this._v(" 🚀 学习建议")])},function(){var t=this._self._c;return t("h3",{attrs:{id:"_1-循序渐进"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-循序渐进"}},[this._v("#")]),this._v(" 1. 循序渐进")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("不要一开始就钻牛角尖")]),this._v(" "),t("li",[this._v("先理解整体架构，再深入细节")]),this._v(" "),t("li",[this._v("结合使用经验理解源码")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"_2-动手实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-动手实践"}},[this._v("#")]),this._v(" 2. 动手实践")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("跟着源码一步步调试")]),this._v(" "),t("li",[this._v("尝试修改源码观察效果")]),this._v(" "),t("li",[this._v("实现简化版本加深理解")]),this._v(" "),t("li",[this._v("参与开源项目贡献")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"_3-记录总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-记录总结"}},[this._v("#")]),this._v(" 3. 记录总结")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("画图理解复杂流程")]),this._v(" "),t("li",[this._v("记录关键概念和实现")]),this._v(" "),t("li",[this._v("总结面试常见问题")]),this._v(" "),t("li",[this._v("建立知识体系")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"💡-面试重点准备"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#💡-面试重点准备"}},[this._v("#")]),this._v(" 💡 面试重点准备")])},function(){var t=this._self._c;return t("h3",{attrs:{id:"高频考点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高频考点"}},[this._v("#")]),this._v(" 高频考点")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[t._v("Fiber 架构的优势和实现")]),t._v(" "),_("li",[t._v("虚拟 DOM 的 diff 算法")]),t._v(" "),_("li",[t._v("React 18 的并发特性")]),t._v(" "),_("li",[t._v("状态更新的完整流程")]),t._v(" "),_("li",[t._v("事件系统的实现原理")]),t._v(" "),_("li",[t._v("Hooks 的实现机制")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"深度问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深度问题"}},[this._v("#")]),this._v(" 深度问题")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[t._v("为什么需要 Fiber 架构？")]),t._v(" "),_("li",[t._v("时间切片是如何实现的？")]),t._v(" "),_("li",[t._v("Suspense 的底层机制是什么？")]),t._v(" "),_("li",[t._v("如何优化 React 应用性能？")]),t._v(" "),_("li",[t._v("Hooks 为什么不能在条件语句中使用？")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"🌈-react-生态面试重点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🌈-react-生态面试重点"}},[this._v("#")]),this._v(" 🌈 React 生态面试重点")])},function(){var t=this._self._c;return t("h3",{attrs:{id:"路由系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由系统"}},[this._v("#")]),this._v(" 路由系统")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("React Router 的实现原理")]),this._v(" "),t("li",[this._v("路由懒加载的实现方式")]),this._v(" "),t("li",[this._v("路由权限控制的策略")]),this._v(" "),t("li",[this._v("路由状态管理")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"状态管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#状态管理"}},[this._v("#")]),this._v(" 状态管理")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[t._v("Redux 单向数据流原理")]),t._v(" "),_("li",[t._v("MobX 响应式编程模型")]),t._v(" "),_("li",[t._v("Zustand 轻量级设计优势")]),t._v(" "),_("li",[t._v("状态管理库的选择策略")]),t._v(" "),_("li",[t._v("状态持久化方案")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"构建工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建工具"}},[this._v("#")]),this._v(" 构建工具")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("Vite 和 Webpack 的区别")]),this._v(" "),t("li",[this._v("代码分割和懒加载实现")]),this._v(" "),t("li",[this._v("性能优化策略")]),this._v(" "),t("li",[this._v("模块联邦的应用场景")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"测试策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试策略"}},[this._v("#")]),this._v(" 测试策略")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("单元测试和集成测试的区别")]),this._v(" "),t("li",[this._v("组件测试的最佳实践")]),this._v(" "),t("li",[this._v("测试覆盖率的重要性")]),this._v(" "),t("li",[this._v("快照测试的使用场景")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"📚-学习进度追踪"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#📚-学习进度追踪"}},[this._v("#")]),this._v(" 📚 学习进度追踪")])},function(){var t=this._self._c;return t("h3",{attrs:{id:"已完成阶段-✅"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#已完成阶段-✅"}},[this._v("#")]),this._v(" 已完成阶段 ✅")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[t._v("[x] "),_("strong",[t._v("第一阶段：基础概念理解")]),t._v(" - 掌握 React 18 新特性和虚拟 DOM 原理")]),t._v(" "),_("li",[t._v("[x] "),_("strong",[t._v("第二阶段：Fiber 架构深入")]),t._v(" - 理解 Fiber 节点结构和双缓冲机制")]),t._v(" "),_("li",[t._v("[x] "),_("strong",[t._v("第三阶段：渲染流程解析")]),t._v(" - 掌握渲染流程和协调算法")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"进行中阶段-🔄"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进行中阶段-🔄"}},[this._v("#")]),this._v(" 进行中阶段 🔄")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("[ ] "),t("strong",[this._v("第四阶段：状态管理原理")]),this._v(" - 正在学习 Hooks 实现原理")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"待开始阶段-⏳"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#待开始阶段-⏳"}},[this._v("#")]),this._v(" 待开始阶段 ⏳")])},function(){var t=this,_=t._self._c;return _("ul",[_("li",[t._v("[ ] "),_("strong",[t._v("第五阶段：并发特性实现")]),t._v(" - 学习 Concurrent Mode 和 Suspense")]),t._v(" "),_("li",[t._v("[ ] "),_("strong",[t._v("第六阶段：事件系统原理")]),t._v(" - 理解事件委托和合成事件")]),t._v(" "),_("li",[t._v("[ ] "),_("strong",[t._v("第七阶段：路由系统源码")]),t._v(" - 深入 React Router 实现")]),t._v(" "),_("li",[t._v("[ ] "),_("strong",[t._v("第八阶段：状态管理库")]),t._v(" - 掌握 Redux、Zustand、MobX")]),t._v(" "),_("li",[t._v("[ ] "),_("strong",[t._v("第九阶段：构建工具原理")]),t._v(" - 学习 Vite 和 Webpack")]),t._v(" "),_("li",[t._v("[ ] "),_("strong",[t._v("第十阶段：测试和调试")]),t._v(" - 掌握测试策略和调试技巧")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"🎯-下一步行动计划"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🎯-下一步行动计划"}},[this._v("#")]),this._v(" 🎯 下一步行动计划")])},function(){var t=this._self._c;return t("h3",{attrs:{id:"本周目标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本周目标"}},[this._v("#")]),this._v(" 本周目标")])},function(){var t=this._self._c;return t("ol",[t("li",[this._v("完成第四阶段：状态管理原理")]),this._v(" "),t("li",[this._v("开始第五阶段：并发特性实现")]),this._v(" "),t("li",[this._v("实践项目：手写简化版 useState 和 useEffect")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"本月目标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本月目标"}},[this._v("#")]),this._v(" 本月目标")])},function(){var t=this._self._c;return t("ol",[t("li",[this._v("完成第五、六阶段学习")]),this._v(" "),t("li",[this._v("开始生态系统学习")]),this._v(" "),t("li",[this._v("参与开源项目或创建个人项目")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"长期目标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#长期目标"}},[this._v("#")]),this._v(" 长期目标")])},function(){var t=this._self._c;return t("ol",[t("li",[this._v("掌握完整的 React 生态")]),this._v(" "),t("li",[this._v("能够独立分析复杂源码")]),this._v(" "),t("li",[this._v("在团队中担任技术专家角色")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("记住：源码学习不是为了背诵代码，而是理解设计思想和实现原理！")]),this._v(" 🎯")])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("React 生态学习是为了掌握完整的开发工具链，提升工程化能力！")]),this._v(" 🚀")])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("学习是一个持续的过程，保持好奇心和实践精神！")]),this._v(" ✨")])}],!1,null,null,null);_.default=v.exports}}]);